#1. list all pods:
cd /var/run/secrets/kubernetes.io/serviceaccount
export CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
curl -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" https://kubernetes.default.svc/api/v1/namespaces/$NAMESPACE/pods


#2. without necessary permission: [will get 4xx]
cd /var/run/secrets/kubernetes.io/serviceaccount
export CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
etcd0# # list all pods:
etcd0# curl -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" https://kubernetes.default.svc/api/v1/namespaces/$NAMESPACE/pods
{
  "kind": "Status",
  "apiVersion": "v1",
  "metadata": {},
  "status": "Failure",
  "message": "pods is forbidden: User \"system:serviceaccount:default:default\" cannot list resource \"pods\" in API group \"\" in the namespace \"default\"",
  "reason": "Forbidden",
  "details": {
    "kind": "pods"
  },
  "code": 403
}etcd0# 


#3. watch permission:[only support a kinds of resource, like pods/pvcs/ but not for spec pod[like: POD_NAME=etcd-1]]
cd /var/run/secrets/kubernetes.io/serviceaccount
export CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
curl -k -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" "https://kubernetes.default.svc/api/v1/namespaces/$NAMESPACE/pods?watch=true"

#4. delete permission:
cd /var/run/secrets/kubernetes.io/serviceaccount
export CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
curl -k -X DELETE -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" "https://kubernetes.default.svc/api/v1/namespaces/$NAMESPACE/pods/$POD_NAME"

#5. add replicas for esp sts
cd /var/run/secrets/kubernetes.io/serviceaccount
export CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
export STS_NAME=etcd
export NEW_REPLICAS=3

# 5.1: query current_replicas about the sts:
curl -k -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" "https://kubernetes.default.svc/apis/apps/v1/namespaces/$NAMSPACE/statefulsets/$STS_NAME"
# 5.2: set new replicas for the sts:
curl -k -X PATCH -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/strategic-merge-patch+json" -d '{"spec":{"replicas":'${NEW_REPLICAS}'}}' "https://kubernetes.default.svc/apis/apps/v1/namespaces/$NAMESPACE/statefulsets/$STS_NAME"

export NEW_REPLICAS=5
curl -k -X PATCH -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/strategic-merge-patch+json" -d '{"spec":{"replicas":'${NEW_REPLICAS}'}}' "https://kubernetes.default.svc/apis/apps/v1/namespaces/$NAMESPACE/statefulsets/$STS_NAME"



