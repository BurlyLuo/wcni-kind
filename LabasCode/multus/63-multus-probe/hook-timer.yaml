apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: macvlan-whereabouts-conf
spec:
  config: '{
      "cniVersion": "0.3.0",
      "name": "whereaboutsexample",
      "type": "macvlan",
      "master": "eth0",
      "mode": "bridge",
      "ipam": {
        "type": "whereabouts",
        "range": "15.15.1.200-15.15.1.205/24"
      }
    }'
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx-app
  ports:
  - port: 80
    targetPort: 80
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mav
spec:
  serviceName: "nginx-service"
  replicas: 2
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
      annotations:
        k8s.v1.cni.cncf.io/networks: macvlan-whereabouts-conf@eth1
    spec:
      terminationGracePeriodSeconds: 50  # 设置为50秒，小于preStop的55秒
      containers:
      - name: nginx
        image: 192.168.2.100:5000/nettool
        env:
        - name: TZ
          value: "Asia/Shanghai" 
        securityContext:
          privileged: false
          capabilities:
            add: ["NET_ADMIN"]
        command:
        - /bin/bash
        - -c
        - |
          mkdir -p /data
          chmod 777 /data
          sed -i 's|access_log /var/log/nginx/access.log;|access_log /data/access.log;|' /etc/nginx/nginx.conf
          echo "-----------------------------------------------" >> /data/timeline.log
          echo "$(date +"%Y-%m-%d %H:%M:%S %Z") Container starting" >> /data/timeline.log
          # 创建一个标记文件，用于readinessProbe检查
          echo "started_at: $(date +%s)" > /data/start_time.txt
          exec nginx -g "daemon off;"
        livenessProbe:
          httpGet:
            port: 80
            path: /index.html
          initialDelaySeconds: 10
          successThreshold: 1
          periodSeconds: 5
          failureThreshold: 3
          timeoutSeconds: 3
        lifecycle:
          preStop:
            exec:
              command: 
              - /bin/bash
              - -c
              - |
                # 设置信号处理函数
                echo "$(date +"%Y-%m-%d %H:%M:%S %Z") preStop started" >> /data/timeline.log
                # 睡眠55s
                sleep 55
                trap 'echo "$(date +"%Y-%m-%d %H:%M:%S %Z") preStop terminated by signal at $(date +"%Y-%m-%d %H:%M:%S %Z")" >> /data/timeline.log; exit' TERM

          postStart:
            exec:
              command: 
              - /bin/bash
              - -c
              - |
                echo "$(date +"%Y-%m-%d %H:%M:%S %Z") postStart started" >> /data/timeline.log
                # Non-block hook
                sleep 30
                echo "$(date +"%Y-%m-%d %H:%M:%S %Z") postStart completed after 30s sleep" >> /data/timeline.log

        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              # 记录每次probe执行的时间
              echo "$(date +"%Y-%m-%d %H:%M:%S %Z") readinessProbe executed" >> /data/timeline.log
              
              # 获取容器启动时间
              if [ -f /data/start_time.txt ]; then
                start_time=$(grep "started_at" /data/start_time.txt | cut -d' ' -f2)
                current_time=$(date +%s)
                elapsed=$((current_time - start_time))
                
                # 只有在启动80秒后才认为就绪
                if [ $elapsed -ge 80 ]; then
                  echo "$(date +"%Y-%m-%d %H:%M:%S %Z") Container ready after ${elapsed}s" >> /data/timeline.log
                  exit 0
                else
                  echo "$(date +"%Y-%m-%d %H:%M:%S %Z") Container not ready yet (${elapsed}s < 80s)" >> /data/timeline.log
                  exit 1
                fi
              else
                echo "$(date +"%Y-%m-%d %H:%M:%S %Z") start_time.txt not found" >> /data/timeline.log
                exit 1
              fi
          initialDelaySeconds: 5
          successThreshold: 1
          periodSeconds: 5
          failureThreshold: 20  # 增加失败阈值以允许更长的启动时间
          timeoutSeconds: 3
        volumeMounts:
        - name: nginx-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: nginx-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
  #persistentVolumeClaimRetentionPolicy:
    #whenDeleted: Delete
    #whenScaled: Delete
